fun u1: Byte = read()
fun u2: Int = read(2).asUInt(BigEndian)
fun u4: Int = read(4).asSInt(BigEndian)
fun encodeToFloat(value: u4) = Float.intBitsToFloat(value)
fun encodeToDouble(value: u4) = Double.longBitsToDouble(value)
fun encodeFromU4(high_bytes: u4, low_bytes: u4) = ((((long) high_bytes) << 32) | low_bytes)
fun encodeToUtf8(bytes: u1[]) = new String(bytes, Charset.forName("UTF-8"))

fun ClassAccessFlags = enum(u2, Set) {
    0x0001: ACC_PUBLIC,
    0x0010: ACC_FINAL,
    0x0020: ACC_SUPER,
    0x0200: ACC_INTERFACE,
    0x0400: ACC_ABSTRACT,
    0x1000: ACC_SYNTHETIC,
    0x2000: ACC_ANNOTATION,
    0x4000: ACC_ENUM
} as ClassAccessFlag
// ClassAccessFlags의 타입은 Set<ClassAccessFlag> 가 된다

// def는 타입 정의 fun은 함수 정의
// def A = (...) 는 사실 fun A = A(...) 와 같은 의미. 즉, def는 fun의 syntactic sugar
// - 명시적인 class 정의같은 게 필요할까? 현재는 명시적인 class 정의는 불가능하고, read logic과 결합된 정의만 가능
// - abstract class나 interface만 명시적인 정의가 가능하도록 할 수는 있겠다

// a*b 는 repeatToList(a, b)의 syntactic sugar
// a*b에서 순서는 관계 없음, 쓰고싶은 순서대로 쓰면 됨

def ClassFile = (
    magic: u4,
    minor_version: u2,
    major_version: u2,
    constant_pool_count: u2,
    constant_pool: cp_info * (constant_pool_count - 1),
    access_flags: ClassAccessFlags,
    this_class: u2 ensuring { 1 <= this_class < constant_pool_count },
    super_class: u2 ensuring { 1 <= super_class < constant_pool_count },
    interfaces_count: u2,
    interfaces: u2 * interfaces_count,
    fields_count: u2,
    fields: (field_info(constant_pool)) * fields_count,
    methods_count: u2,
    methods: (method_info(constant_pool)) * methods_count,
    attributes_count: u2,
    attributes: (attribute_info(constant_pool)) * attributes_count
)

def cp_info = (
    tag: u1,
    info: match(tag) {
        7: CONSTANT_Class(name_index: u2)
        9: CONSTANT_Fieldref(class_index: u2, name_and_type_index: u2)
        10: CONSTANT_Methodref(class_index: u2, name_and_type_index: u2)
        11: CONSTANT_InterfaceMethodref(class_index: u2, name_and_type_index: u2)
        8: CONSTANT_String(string_index: u2)
        3: CONSTANT_Integer(bytes: u4)
        4: CONSTANT_Float(bytes: encodeToFloat(u4))
        5: CONSTANT_Long(high_bytes: u4, low_bytes: u4, value: encodeFromU4(high_bytes, low_bytes))
        6: CONSTANT_Double(high_bytes: u4, low_bytes: u4, value: encodeToDouble(encodeFromU4(high_bytes, low_bytes)))
        12: CONSTANT_NameAndType(name_index: u2, descriptor_index: u2)
        1: ConstantUtf8(length: u2, bytes: u1 * length, string: encodeToUtf8(bytes))
        15: CONSTANT_MethodHandle(reference_kind: u1, reference_index: u2)
        16: CONSTANT_MethodType(descriptor_index: u2)
        18: CONSTANT_InvokeDynamic(bootstrap_method_attr_index: u2, name_and_type_index: u2)
    } as ConstantValue
    // "as ConstantValue"가 없으면 info는 Any, CONSTANT_** 들도 모두 서로 관계 없는 클래스가 될 것
    // "as ConstantValue"가 있으므로써 info는 ConstantValue, CONSTANT_** 들은 모두 ConstantValue의 하위 클래스
)

fun FieldAccessFlags = enum(u2, Set) {
    0x0001: ACC_PUBLIC,
    0x0002: ACC_PRIVATE,
    0x0004: ACC_PROTECTED,
    0x0008: ACC_STATIC,
    0x0010: ACC_FINAL,
    0x0040: ACC_VOLATILE,
    0x0080: ACC_TRANSIENT,
    0x1000: ACC_SYNTHETIC,
    0x4000: ACC_ENUM
} as FieldAccessFlag

def field_info(constant_pool) = (
    access_flags: FieldAccessFlags,
    name_index: u2,
    descriptor_index: u2,
    attributes_count: u2,
    attributes: (attribute_info(constant_pool)) * attributes_count
)

fun MethodAccessFlags = enum(u2) {
    0x0001: ACC_PUBLIC,
    0x0002: ACC_PRIVATE,
    0x0004: ACC_PROTECTED,
    0x0008: ACC_STATIC,
    0x0010: ACC_FINAL,
    0x0020: ACC_SYNCHRONIZED,
    0x0040: ACC_BRIDGE,
    0x0080: ACC_VARARGS,
    0x0100: ACC_NATIVE,
    0x0400: ACC_ABSTRACT,
    0x0800: ACC_STRICT,
    0x1000: ACC_SYNTHETIC
} as MethodAccessFlag

def method_info(constant_pool) = (
    access_flags: MethodAccessFlags,
    name_index: u2,
    descriptor_index: u2,
    attributes_count: u2,
    attributes: attribute_info(constant_pool) * attributes_count
)

def attribute_info(constant_pool) = (
    attribute_name_index: u2,
    attribute_length: u4,
    info: u1[attribute_length],
    infoEnc: EncodedAttribute?(constant_pool, attribute_name_index, info)
)

def annotation = (
    type_index: u2,
    num_element_value_pairs: u2,
    element_value_pairs: ElementValuePair(
        element_name_index: u2,
        value: element_value
        // TODO
    ) * num_element_value_pairs
)

def ParameterAnnotation = (
    num_annotations: u2,
    annotations: annotation * num_annotations
)

// EncodedAttribute? 에서 ?는 nullable임을 의미하고, hxm 파일 안에서는 이 타입을 사용하는 모든 지점에서 동일하게 ?를 붙여 주어야 하지만, 실제로 코드가 생성될 때는 ? 없이 EncodedAttribute라는 이름의 클래스로 만들어진다.
def EncodedAttribute?(constant_pool, attribute_name_index, info) = from(info, Fully) {
    match((constant_pool[info] as ConstantUtf8).string) {
        "ConstantValue": ConstnatValue(
            attribute_name_index: u2,
            attribute_length: u4,
            constantvalue_index: u2
        ),
        "Code": Code(
            attribute_name_index: u2,
            attribute_length: u4,
            max_stack: u2,
            max_locals: u2,
            code_length: u4,
            code: u1 * code_length,
            exception_table_length: u2,
            exception_table: ExceptionTable(
                start_pc: u2,
                end_pc: u2,
                handler_pc: u2,
                catch_type: u2
            ) * exception_table_length,
            attributes_count: u2,
            attributes: attribute_info * attributes_count
        ),
        "StackMapTable": StackMapTable(
            attribute_name_index: u2,
            attribute_length: u4,
            number_of_entries: u2,
            entries: stack_map_frame * number_of_entries
            // TODO
        ),
        "Exceptions": Exceptions(
            attribute_name_index: u2,
            attribute_length: u4,
            number_of_exceptions: u2,
            exception_index_table: u2 * number_of_exceptions
        ),
        "InnerClasses": InnerClasses(
            attribute_name_index: u2,
            attribute_length: u4,
            number_of_classes: u2,
            classes: Class(
                inner_class_info_index: u2,
                outer_class_info_index: u2,
                inner_name_index: u2,
                inner_class_access_flags: u2
            ) * number_of_classes
        ),
        "EnclosingMethod": EnclosingMethod(
            attribute_name_index: u2,
            attribute_length: u4,
            class_index: u2,
            method_index: u2
        ),
        "Synthetic": Synthetic(
            attribute_name_index: u2,
            attribute_length: u4
        ),
        "Signature": Signature(
            attribute_name_index: u2,
            attribute_length: u4,
            signature_index: u2
        ),
        "SourceFile": SourceFile(
            attribute_name_index: u2,
            attribute_length: u4,
            sourcefile_index: u2
        ),
        "SourceDebugExtension": SourceDebugExtension(
            attribute_name_index: u2,
            attribute_length: u4,
            debug_extension: u1 * attribute_length
        ),
        "LineNumberTable": LineNumberTable(
            attribute_name_index: u2,
            attribute_length: u4,
            line_number_table_length: u2,
            line_number_table: line_number_table_length * LineNumberTableEntry(
                start_pc: u2,
                line_number: u2
            )
        ),
        "LocalVariableTable": LocalVariableTable(
            attribute_name_index: u2,
            attribute_length: u4,
            local_variable_table_length: u2,
            local_variable_table: LocalVariableTableEntry(
                start_pc: u2,
                length: u2,
                name_index: u2,
                descriptor_index: u2,
                index: u2
            ) * local_variable_table_length;
        ),
        "LocalVariableTypeTable": LocalVariableTypeTable(
            attribute_name_index: u2,
            attribute_length: u4,
            local_variable_type_table_length: u2,
            local_variable_type_table: LocalVariableTypeTableEntry(
                start_pc: u2,
                length: u2,
                name_index: u2,
                signature_index: u2,
                index: u2
            ) * local_variable_type_table_length
        ),
        "Deprecated": Deprecated(
            attribute_name_index: u2,
            attribute_length: u4
        ),
        "RuntimeVisibleAnnotations": RuntimeVisibleAnnotations(
            attribute_name_index: u2,
            attribute_length: u4,
            num_annotations: u2,
            annotations: annotation * num_annotations
        ),
        "RuntimeInvisibleAnnotations": RuntimeInvisibleAnnotations(
            attribute_name_index: u2,
            attribute_length: u4,
            num_annotations: u2,
            annotations: annotation * num_annotations
        ),
        "RuntimeVisibleParameterAnnotations": RuntimeVisibleParameterAnnotations(
            attribute_name_index: u2,
            attribute_length: u4,
            num_parameters: u1,
            parameter_annotations: ParameterAnnotation * num_parameters
        ),
        "RuntimeInvisibleParameterAnnotations": RuntimeInvisibleParameterAnnotations(
            attribute_name_index: u2,
            attribute_length: u4,
            num_parameters: u1,
            parameter_annotations: ParameterAnnotation * num_parameters
        ),
        "AnnotationDefault": AnnotationDefault(
            attribute_name_index: u2,
            attribute_length: u4,
            default_value: element_value
        ),
        "BootstrapMethods": BootstrapMethods(
            attribute_name_index: u2,
            attribute_length: u4,
            num_bootstrap_methods: u2,
            bootstrap_methods: BootstrapMethod(
                bootstrap_method_ref: u2,
                num_bootstrap_arguments: u2,
                bootstrap_arguments: u2 * num_bootstrap_arguments
            ) * num_bootstrap_methods
        ),
        else: null
    } // 뒤에 "as EncodedAttribute?"가 있는 것과 마찬가지다
}
